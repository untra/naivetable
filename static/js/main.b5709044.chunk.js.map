{"version":3,"sources":["NaiveTable.tsx","routes/home.tsx","routes/test.tsx","routes/index.tsx","index.tsx"],"names":["sortDir","defaultComparefn","a","b","concat","localeCompare","defaultTableStyle","display","gridTemplateColumns","borderTop","borderRight","borderLeft","borderBottom","defaultCellStyle","padding","defaultHeaderStyle","backgroundColor","fontWeight","cssSortStyle","border","borderWidth","float","cssSortAsc","Object","objectSpread","transform","cssSortDsc","cssSortable","defaultRenderFunc","data","react_default","createElement","defaultHeaders","dataKey","label","width","render","sort","indexHeader","buildInititalState","props","includeIndex","cellStyle","tableStyle","incIndexHeader","incHeaders","headers","paragon","keys","map","key","inferHeadersFromData","toConsumableArray","sortedData","reduce","acc","header","asc","dsc","processSort","NaiveTable","tableHeaders","initState","_useState","useState","_useState2","slicedToArray","state","setState","headerColumnWidths","gridStyle","toggleHeader","index","updatedHeaders","toggledHeader","updatedHeader","className","style","headerStyle","arrow","onClick","change","tableData","indexr","dataObj","rowIndex","renderCell","dataVal","words","wwords","version","packageJSON","randomData","nToGen","rows","_loop","row","forEach","Math","random","blamDataRows","Home","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomFilenames","randomFilename","rand","floor","length","lang","W","input","role","aria-label","href","react_router_dom","to","react_highlight_default","JSON","stringify","NaiveTable_NaiveTable","React","Component","varietyofDataTypesData","varietyofDataTypesDataJSON","styledHeaders","styledHeadersJSON","nameData","nameDataJSON","nameHeaders","val","c","Test","of","reload","window","location","ReactDOM","basename","react_router","path","component","test","onEnter","exact","home","document","getElementById"],"mappings":"s/EAQYA,iMAOZ,IAAMC,EAA8B,SAACC,EAAQC,GAC3C,MAAO,GAAAC,OAAGF,GAAIG,cAAP,GAAAD,OAAwBD,KAG3BG,EAAyC,CAC7CC,QAAS,OACTC,oBAAqB,GACrBC,UAAW,kBACXC,YAAa,kBACbC,WAAY,kBACZC,aAAc,mBAGVC,EAAwC,CAC5CC,QAAS,UACTF,aAAc,kBACdH,UAAW,mBAGPM,EAA0C,CAC9CC,gBAAiB,YACjBC,WAAY,QAGRC,EAAoC,CACxCC,OAAQ,cACRC,YAAa,cACbb,QAAS,eACTO,QAAS,MACTO,MAAO,SAGHC,EAA+BC,OAAAC,EAAA,EAAAD,CAAA,GAChCL,EADgC,CAEnCO,UAAW,oBAGPC,EAA+BH,OAAAC,EAAA,EAAAD,CAAA,GAChCL,EADgC,CAEnCO,UAAW,kBAGPE,EAAgCJ,OAAAC,EAAA,EAAAD,CAAA,GACjCL,EADiC,CAEpCE,YAAa,kBACbN,QAAS,SAmCLc,EAAoB,SAACC,GAAD,OAAeC,EAAA5B,EAAA6B,cAAA,eAAA3B,OAAUyB,KAE7CG,EAAoC,CACxCC,QAAS,GACTC,MAAO,GACPC,MAAO,OACPC,OAAQR,EACRS,MAAM,GA8BFC,EAAiC,CACrCL,QApImB,UAqInBC,MAAO,IACPC,MAAO,OACPC,OAAQR,GAkDJW,EAAqB,SAACC,GAE1B,IAAMC,EAAeD,EAAMC,eAAgB,EACrCC,EAASnB,OAAAC,EAAA,EAAAD,CAAA,GAAQV,EAAqB2B,EAAME,WAC5CC,EAAUpB,OAAAC,EAAA,EAAAD,CAAA,GAAQjB,EAAsBkC,EAAMG,YAG9Cd,EAAOW,EAAMX,MAAQ,GAErBe,EAAsCH,EAAe,CAACH,GAAe,GACrEO,EAAaL,EAAMM,QAAUN,EAAMM,QAzDd,SAACjB,GAC5B,IAAMkB,EAAUlB,EAAK,GACrB,OAAIkB,EACKxB,OAAOyB,KAAKD,GAASE,IAAI,SAAAC,GAM9B,OAL+B3B,OAAAC,EAAA,EAAAD,CAAA,GAC1BS,EAD0B,CAE7BC,QAASiB,EACThB,MAAOgB,MAKN,GA6C4CC,CAAqBtB,GAClEiB,EAAO,GAAA1C,OAAOwC,EAAPrB,OAAA6B,EAAA,EAAA7B,CAA0BsB,IACjCQ,EAnCY,SAACxB,EAAiBiB,GAepC,OAAOA,EAAQQ,OAdA,SAACC,EAAgBC,GAAyC,IAC/DnB,EAAkBmB,EAAlBnB,KACFa,EADoBM,EAAZvB,SACS,GACvB,OAAII,IAASrC,EAAQyD,IACZF,EAAIlB,KAAK,SAACnC,EAAGC,GAAJ,OAAUF,EAAiBC,EAAEgD,GAAM/C,EAAE+C,MAEnDb,IAASrC,EAAQ0D,IACZH,EAAIlB,KAAK,SAACnC,EAAGC,GAAJ,OAAWF,EAAiBC,EAAEgD,GAAM/C,EAAE+C,MAEpC,oBAATb,EACFkB,EAAIlB,KAAK,SAACnC,EAAGC,GAAJ,OAAUkC,EAAKnC,EAAGC,KAE7BoD,GAEqB1B,GAoBX8B,CAAY9B,EAAMiB,GACrC,MAAO,CACLA,UACAO,aACAZ,eACAC,YACAC,eASSiB,EAAwC,SACnDpB,GAEA,IAyEwBqB,EAzElBC,EAAYvB,EAAmBC,GADlCuB,EAGuBC,mBAASF,GAHhCG,EAAA1C,OAAA2C,EAAA,EAAA3C,CAAAwC,EAAA,GAGII,EAHJF,EAAA,GAGWG,EAHXH,EAAA,GAKKnB,EAA+CqB,EAA/CrB,QAASO,EAAsCc,EAAtCd,WAAYV,EAA0BwB,EAA1BxB,WAAYD,EAAcyB,EAAdzB,UAEnClC,EA/DmB,SAACsC,GAAD,OACzBA,EAAQQ,OAAO,SAACC,EAAKC,GAAN,SAAApD,OAAoBmD,EAApB,KAAAnD,OAA2BoD,EAAOrB,OAAS,OAA3C,MAAsD,IA8DzCkC,CAAmBvB,GAEzCwB,EAAS/C,OAAAC,EAAA,EAAAD,CAAA,GAAQoB,EAAR,CAAoBnC,wBAE7B+D,EAAe,SAACC,GACpB,IAAMC,EAAclD,OAAA6B,EAAA,EAAA7B,CAAOuB,GACrB4B,EAAgBD,EAAeD,GAE/BnC,EADkBqC,EAAcrC,OACLrC,EAAQyD,IAAMzD,EAAQ0D,IAAM1D,EAAQyD,IAC/DkB,EAAapD,OAAAC,EAAA,EAAAD,CAAA,GAAQmD,EAAR,CAAuBrC,SAE1C,OADAoC,EAAeD,GAASG,EACjBF,GA6DT,OACE3C,EAAA5B,EAAA6B,cAAA,OAAK6C,UAAWpC,EAAMoC,WAAa,GAAIC,MAAOP,GAC3CxB,EAAQG,IA5DQ,SAACO,EAA2BgB,GAAkB,IACzDnC,EAAuBmB,EAAvBnB,KAAMH,EAAiBsB,EAAjBtB,MAAO2C,EAAUrB,EAAVqB,MACfC,EAAWvD,OAAAC,EAAA,EAAAD,CAAA,GAAQR,EAAuB2B,EAAcmC,GACxDE,EACJ1C,IAASrC,EAAQyD,IACf3B,EAAA5B,EAAA6B,cAAA,KAAG8C,MAAOvD,IACRe,IAASrC,EAAQ0D,IACnB5B,EAAA5B,EAAA6B,cAAA,KAAG8C,MAAOnD,KACC,IAATW,EACFP,EAAA5B,EAAA6B,cAAA,KAAG8C,MAAOlD,IACR,KAOAqD,EAAW3C,EALF,SAACmC,GAAD,OAAmB,WAChC,IAAM1B,EAAUyB,EAAaC,GAC7BJ,EAAS7C,OAAAC,EAAA,EAAAD,CAAA,GAAK4C,EAAN,CAAarB,cAGcmC,CAAOT,GAApB,kBAAM,MAE9B,OACE1C,EAAA5B,EAAA6B,cAAA,QAAMmB,IAAKsB,EAAOK,MAAOC,EAAaE,QAASA,GAC5C9C,EADH,IACW6C,KAwCV1B,EAAWJ,KARQY,EAQWf,EAR2B,SAC5DoC,EACAC,GAF4D,OAGzDtB,EAAaZ,KA7BKmC,EA6BaF,EA7BKG,EA6BMF,EA7Be,SAC5D3B,EACAgB,GACG,IACKvC,EAAoBuB,EAApBvB,QAEFqD,EAFsB9B,EAAXpB,QAEYR,EAEvB2D,EAAgBtD,EA9QL,YAkRfA,EAEEoD,EAAW,EAGXD,EAAQnD,GAPRmD,EAQJ,OACEtD,EAAA5B,EAAA6B,cAAA,QAAMmB,IAAKsB,EAAOK,MAAOnC,GAEtB4C,EAAWC,GAAU,QArBN,IAACH,EAAkBC,OC/PrCG,EAAuDC,EAGvDC,EAAUC,EAAYD,QActBE,EAZe,SAAC9C,EAAmB+C,GAEvC,IADA,IAAIC,EAAkB,GADoCC,EAAA,SAEjDvB,GACP,IAAMwB,EAAe,GACrBlD,EAAQmD,QAAQ,SAAAzC,GACdwC,EAAIxC,GAAU0C,KAAKC,WAErBL,EAAI,GAAA1F,OAAAmB,OAAA6B,EAAA,EAAA7B,CAAOuE,GAAP,CAAaE,KALVxB,EAAQ,EAAGA,EAAQqB,EAAQrB,IAASuB,IAO7C,OAAOD,EAGUM,CAAa,CAAC,MAAO,MAAO,OAAQ,GAOlCC,cAGnB,SAAAA,EAAY7D,GAAwB,IAAA8D,EAAA/E,OAAAgF,EAAA,EAAAhF,CAAAiF,KAAAH,IAClCC,EAAA/E,OAAAkF,EAAA,EAAAlF,CAAAiF,KAAAjF,OAAAmF,EAAA,EAAAnF,CAAA8E,GAAAM,KAAAH,KAAMhE,KAHSoE,gBAAkB,CAAC,OAAQ,kBAAmB,YAAa,cAAe,QAAS,iBAAkB,KAElFN,EAD5BO,eAAiBP,EAAKM,gBAAgB,GAG5C,IAAME,EAAOZ,KAAKa,MAAOb,KAAKC,SAAWG,EAAKM,gBAAgBI,QAC9DV,EAAKO,eAAiBP,EAAKM,gBAAgBE,IAASR,EAAKO,eACxCrE,EAATyE,KAJ0B,OAAAX,wEAWlC,IAAMY,EAAI,SAACC,GACT,IAAM5G,EAAUiF,EAAK,GAAe2B,IAAU,GAC9C,MAAO,GAAA/G,OAAGG,IAAa,UAGzB,OACEuB,EAAA5B,EAAA6B,cAAA,OAAK6C,UAAU,gBACb9C,EAAA5B,EAAA6B,cAAA,OAAK6C,UAAU,WACb9C,EAAA5B,EAAA6B,cAAA,UAAID,EAAA5B,EAAA6B,cAAA,QAAMqF,KAAK,MAAMC,aAAW,SAA5B,gBAAJ,eACAvF,EAAA5B,EAAA6B,cAAA,UACGmF,EAAE,MADL,IACaA,EAAE,MADf,IACuBA,EAAE,MADzB,IACiCA,EAAE,MAAO,IAD1C,eAC4DA,EAAE,MAC3DA,EAAE,MAAO,KACPpF,EAAA5B,EAAA6B,cAAA,UAAID,EAAA5B,EAAA6B,cAAA,KAAGuF,KAAK,wBAAR,SAAJ,IAA6CxF,EAAA5B,EAAA6B,cAAA,KAAGuF,KAAK,8CAAR,WAA7C,KAAgHJ,EAAE,OAEvHpF,EAAA5B,EAAA6B,cAAA,YACED,EAAA5B,EAAA6B,cAAA,cACI2D,EADJ,KACe,IACb5D,EAAA5B,EAAA6B,cAACwF,EAAA,EAAD,CAAMC,GAAG,SAAT,SAFF,IAEiC,IAC/B1F,EAAA5B,EAAA6B,cAAA,KAAGuF,KAAK,uCAAR,UAHF,KAG6D,IAC3DxF,EAAA5B,EAAA6B,cAAA,KAAGuF,KAAK,mDAAR,OAJF,KAIsE,IACpExF,EAAA5B,EAAA6B,cAAA,KAAGuF,KAAK,uDAAR,aAGJxF,EAAA5B,EAAA6B,cAAA,WACAD,EAAA5B,EAAA6B,cAAA,WACED,EAAA5B,EAAA6B,cAAA,4BADF,IAC+BmF,EAAE,MADjC,IACyC,oBACvCpF,EAAA5B,EAAA6B,cAAA,YAAO,sCACN,MAEHD,EAAA5B,EAAA6B,cAAA,WACGmF,EAAE,OACHpF,EAAA5B,EAAA6B,cAAA,YAAO,cACNmF,EAAE,QAELpF,EAAA5B,EAAA6B,cAAC0F,EAAAvH,EAAD,CAAW0E,UAAU,OAArB,gBAAAxE,OACMoG,KAAKK,eADX,0FAAAzG,OAIL8G,EAAE,OAJG,oBAAA9G,OAKMsH,KAAKC,UAAU/B,EAAW,GAAI,KAAM,GAL1C,gBAAAxF,OAML8G,EAAE,OANG,iCASApF,EAAA5B,EAAA6B,cAAC6F,EAAD,CAAY/F,KAAM+D,aAzDMiC,IAAMC,mCCJlCC,EAAoCC,EAEpCC,EAAqCC,EAErCC,EAAsBC,EAIfC,EAAc,CAEzB,CAAEnG,MAAO,OAAQD,QAAS,KAE1B,CAAEC,MAAO,MAAOD,QAAS,IAAK4C,MAAO,CAAE7D,gBAAiB,SAExD,CACEkB,MAAO,eACPD,QAAS,IACTG,OAAQ,SAACkG,GAAD,OACNxG,EAAA5B,EAAA6B,cAAA,aAAA3B,OAAQkI,EAAM,GAAK,gBAAa,gBAAhC,gBAAAlI,OAAyDkI,MAK7D,CACEpG,MAAO,aACPD,QAAS,GACTG,OAAQ,SAACkG,GAAD,OACNxG,EAAA5B,EAAA6B,cAAA,aAAA3B,OAAQsH,KAAKC,UAAUW,EAAIpI,GAA3B,QAAAE,OAAoCkI,EAAIC,EAAI,GAAK,SAAW,GAA5D,KAAAnI,OACEkI,EAAIC,EAAI,GAAK,QAAU,WAM7B,CACErG,MAAO,UACPD,QAAS,GACTG,OAAQ,iBACN,sHACFD,MAAO,QAIUqG,mLAEjB,OACE1G,EAAA5B,EAAA6B,cAAA,OAAK6C,UAAU,WACb9C,EAAA5B,EAAA6B,cAAA,UACED,EAAA5B,EAAA6B,cAAA,QAAMqF,KAAK,MAAMC,aAAW,SAA5B,gBAEQ,IAHV,cAMAvF,EAAA5B,EAAA6B,cAAA,gDACAD,EAAA5B,EAAA6B,cAAA,yCAC8BD,EAAA5B,EAAA6B,cAAA,KAAGuF,KAlEvC,uEAkEoC,eAE9BxF,EAAA5B,EAAA6B,cAAA,sCACyBD,EAAA5B,EAAA6B,cAAA,KAAGuF,KA9DZ,uDA8DS,eACzBxF,EAAA5B,EAAA6B,cAAA,gGAIAD,EAAA5B,EAAA6B,cAAA,UACED,EAAA5B,EAAA6B,cAAA,0EACAD,EAAA5B,EAAA6B,cAAA,+FAIAD,EAAA5B,EAAA6B,cAAA,qIAKFD,EAAA5B,EAAA6B,cAAA,yFAIAD,EAAA5B,EAAA6B,cAAC6F,EAAD,CAAYhD,UAAW,QAAS/C,KAAMkG,IACtCjG,EAAA5B,EAAA6B,cAAA,+EACAD,EAAA5B,EAAA6B,cAAC6F,EAAD,CAAYhD,UAAW,QAAS/C,KAAMsG,EAAU1F,cAAc,IAC9DX,EAAA5B,EAAA6B,cAAA,wEACAD,EAAA5B,EAAA6B,cAAC6F,EAAD,CAAYhD,UAAW,QAAS/C,KAAMsG,EAAUrF,QAASuF,IACzDvG,EAAA5B,EAAA6B,cAAA,8EACAD,EAAA5B,EAAA6B,cAAC6F,EAAD,CACEhD,UAAW,QACX/C,KAAMsG,EACNrF,QAASmF,IAEXnG,EAAA5B,EAAA6B,cAAA,6EACC,OACDD,EAAA5B,EAAA6B,cAAA,6EACC,OACDD,EAAA5B,EAAA6B,cAAA,8DACC,OACDD,EAAA5B,EAAA6B,cAAA,sEACC,OACDD,EAAA5B,EAAA6B,cAAA,uDACAD,EAAA5B,EAAA6B,cAAC6F,EAAD,CAAYhD,UAAW,QAAS/C,KAAM,KACtCC,EAAA5B,EAAA6B,cAAA,2DACAD,EAAA5B,EAAA6B,cAAC6F,EAAD,CAAYhD,UAAW,SAAU/C,KAAM,CAAC,CAAE4G,GAAI,kBAzDpBZ,IAAMC,WC7DlCY,EAAS,kBAAMC,OAAOC,SAASF,UCNrCG,IAASzG,ODSPN,EAAA5B,EAAA6B,cAACwF,EAAA,EAAD,CAAYuB,SAAS,KACrBhH,EAAA5B,EAAA6B,cAACgH,EAAA,EAAD,KACEjH,EAAA5B,EAAA6B,cAACgH,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWC,EAAMC,QAAST,IAC9C5G,EAAA5B,EAAA6B,cAACgH,EAAA,EAAD,CAAOK,OAAK,EAACJ,KAAK,IAAIC,UAAWI,IACjCvH,EAAA5B,EAAA6B,cAACgH,EAAA,EAAD,CACEE,UAAW,kBACTnH,EAAA5B,EAAA6B,cAAA,OAAK6C,UAAU,WACb9C,EAAA5B,EAAA6B,cAAA,UAAK,iBAAsB,UChBXuH,SAASC,eAAe","file":"static/js/main.b5709044.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nconst indexDataKey = \"'index'\";\r\n\r\n/**\r\n * sortDir - which direction the table should sort in\r\n * @export\r\n * @enum {string}\r\n */\r\nexport enum sortDir {\r\n  asc = \"asc\",\r\n  dsc = \"dsc\"\r\n}\r\ntype compareFn = (a: any, b: any) => number;\r\ntype sortDirection = sortDir | boolean | compareFn;\r\n\r\nconst defaultComparefn: compareFn = (a: any, b: any) => {\r\n  return `${a}`.localeCompare(`${b}`);\r\n};\r\n\r\nconst defaultTableStyle: React.CSSProperties = {\r\n  display: \"grid\",\r\n  gridTemplateColumns: \"\",\r\n  borderTop: \"1px solid black\",\r\n  borderRight: \"1px solid black\",\r\n  borderLeft: \"1px solid black\",\r\n  borderBottom: \"1px solid black\"\r\n};\r\n\r\nconst defaultCellStyle: React.CSSProperties = {\r\n  padding: \"8px 4px\",\r\n  borderBottom: \"1px solid black\",\r\n  borderTop: \"1px solid black\"\r\n};\r\n\r\nconst defaultHeaderStyle: React.CSSProperties = {\r\n  backgroundColor: \"lightgray\",\r\n  fontWeight: \"bold\"\r\n};\r\n\r\nconst cssSortStyle: React.CSSProperties = {\r\n  border: \"solid black\",\r\n  borderWidth: \"0 3px 3px 0\",\r\n  display: \"inline-block\",\r\n  padding: \"3px\",\r\n  float: \"right\"\r\n};\r\n\r\nconst cssSortAsc: React.CSSProperties = {\r\n  ...cssSortStyle,\r\n  transform: \"rotate(-135deg)\"\r\n};\r\n\r\nconst cssSortDsc: React.CSSProperties = {\r\n  ...cssSortStyle,\r\n  transform: \"rotate(45deg)\"\r\n};\r\n\r\nconst cssSortable: React.CSSProperties = {\r\n  ...cssSortStyle,\r\n  borderWidth: \"0px 3px 0px 0px\",\r\n  padding: \"12px\"\r\n};\r\n\r\n/**\r\n * DataObj - any object that is string indexed.\r\n * @export\r\n * @interface DataObj\r\n */\r\nexport interface DataObj {\r\n  [index: string]: any;\r\n}\r\n\r\n/**\r\n * TableConfigHeader - proprties of a NaiveTable header\r\n * @export\r\n * @interface TableConfigHeader\r\n */\r\nexport interface TableConfigHeader {\r\n  // this is the string label for the table header\r\n  label: string;\r\n  // this is the dataKey that is referenced on the data object when displaying this row\r\n  // if set to '' (empty string) the whole data object will be sent to the render function\r\n  dataKey?: string;\r\n  // a provided width, that defaults to 'auto'\r\n  width?: string;\r\n  // an optional render function, that defaults to a naive rendering function\r\n  render?: (data: any) => JSX.Element | string;\r\n  // sortability: typed true, false, 'asc' or 'dsc'\r\n  // true - enable the ability to sort this header\r\n  // asc & dsc - sort the header this\r\n  sort?: sortDirection;\r\n  // style: any specific styling that should be used when rendering the header\r\n  style?: React.CSSProperties;\r\n}\r\n\r\nconst defaultRenderFunc = (data: any) => <span>{`${data}`}</span>;\r\n\r\nconst defaultHeaders: TableConfigHeader = {\r\n  dataKey: \"\",\r\n  label: \"\",\r\n  width: \"auto\",\r\n  render: defaultRenderFunc,\r\n  sort: false\r\n};\r\n\r\n/**\r\n * TableConfigProps - properties of a NaiveTable Component.\r\n * Only data is required.\r\n * @export\r\n * @interface TableConfigProps\r\n */\r\nexport interface TableConfigProps {\r\n  data: DataObj[];\r\n  headers?: TableConfigHeader[];\r\n  includeIndex?: boolean;\r\n  tableStyle?: React.CSSProperties;\r\n  cellStyle?: React.CSSProperties;\r\n  className?: string;\r\n}\r\n\r\ninterface TableConfigState {\r\n  sortedData: DataObj[];\r\n  sortIndex?: number;\r\n  sortDir?: sortDir;\r\n  headers: TableConfigHeader[];\r\n  includeIndex: boolean;\r\n  tableStyle: React.CSSProperties;\r\n  cellStyle: React.CSSProperties;\r\n}\r\n\r\nexport type NaiveTableProps = TableConfigProps;\r\n\r\nconst indexHeader: TableConfigHeader = {\r\n  dataKey: indexDataKey,\r\n  label: \"#\",\r\n  width: \"auto\",\r\n  render: defaultRenderFunc\r\n};\r\n\r\nconst inferHeadersFromData = (data: DataObj[]): TableConfigHeader[] => {\r\n  const paragon = data[0];\r\n  if (paragon) {\r\n    return Object.keys(paragon).map(key => {\r\n      const header: TableConfigHeader = {\r\n        ...defaultHeaders,\r\n        dataKey: key,\r\n        label: key\r\n      };\r\n      return header;\r\n    });\r\n  }\r\n  return [];\r\n};\r\n\r\n/**\r\n * The css to render the 'grid' value is calculted here.\r\n * For example, three default headers should return '1fr 1fr 1fr'\r\n * @param {TableConfigHeader[]} headers\r\n */\r\nconst headerColumnWidths = (headers: TableConfigHeader[]) =>\r\n  headers.reduce((acc, header) => `${acc} ${header.width || \"auto\"} `, \"\");\r\n\r\n// processSort will sort provided data according to the provided headers\r\nconst processSort = (data: DataObj[], headers: TableConfigHeader[]) => {\r\n  const sortFn = (acc: DataObj[], header: TableConfigHeader): DataObj[] => {\r\n    const { sort, dataKey } = header;\r\n    const key = dataKey || \"\";\r\n    if (sort === sortDir.asc) {\r\n      return acc.sort((a, b) => defaultComparefn(a[key], b[key]));\r\n    }\r\n    if (sort === sortDir.dsc) {\r\n      return acc.sort((a, b) => -defaultComparefn(a[key], b[key]));\r\n    }\r\n    if (typeof sort === \"function\") {\r\n      return acc.sort((a, b) => sort(a, b));\r\n    }\r\n    return acc;\r\n  };\r\n  return headers.reduce(sortFn, data);\r\n};\r\n\r\n/**\r\n * Creates the initial NaiveTable state from the initial props\r\n * @param {NaiveTableProps} props\r\n * @returns {TableConfigState}\r\n */\r\nconst buildInititalState = (props: NaiveTableProps): TableConfigState => {\r\n  // passed in options shadow the default options\r\n  const includeIndex = props.includeIndex || false;\r\n  const cellStyle = { ...defaultCellStyle, ...props.cellStyle };\r\n  const tableStyle = { ...defaultTableStyle, ...props.tableStyle };\r\n  // data must be provided. Otherwise if its falsey, it defaults to empty array (no data)\r\n  // TODO: check that data.length < 1000, and error otherwise\r\n  const data = props.data || [];\r\n  // if headers are not defined, infer from data keys\r\n  const incIndexHeader: TableConfigHeader[] = includeIndex ? [indexHeader] : [];\r\n  const incHeaders = props.headers ? props.headers : inferHeadersFromData(data);\r\n  const headers = [...incIndexHeader, ...incHeaders];\r\n  const sortedData = processSort(data, headers);\r\n  return {\r\n    headers,\r\n    sortedData,\r\n    includeIndex,\r\n    cellStyle,\r\n    tableStyle\r\n  };\r\n};\r\n\r\n/**\r\n * NaiveTable - a dumb simple naive React data table component\r\n * @param {NaiveTableProps} props\r\n * @returns\r\n */\r\nexport const NaiveTable: React.FC<NaiveTableProps> = (\r\n  props: NaiveTableProps\r\n) => {\r\n  const initState = buildInititalState(props);\r\n  // useState hook - rule of thumb is to call the useState hook early and once during execution\r\n  const [state, setState] = useState(initState);\r\n  // destructure the properties from state\r\n  const { headers, sortedData, tableStyle, cellStyle } = state;\r\n  // infers the grid widths of the headers\r\n  const gridTemplateColumns = headerColumnWidths(headers);\r\n  // the gridStyle is injected into the table dynamically\r\n  const gridStyle = { ...tableStyle, gridTemplateColumns };\r\n  // toggleHeader will sort the data by the header sort at the given index\r\n  const toggleHeader = (index: number) => {\r\n    const updatedHeaders = [...headers];\r\n    const toggledHeader = updatedHeaders[index];\r\n    const sortedDirection = toggledHeader.sort;\r\n    const sort = sortedDirection === sortDir.asc ? sortDir.dsc : sortDir.asc;\r\n    const updatedHeader = { ...toggledHeader, sort };\r\n    updatedHeaders[index] = updatedHeader;\r\n    return updatedHeaders;\r\n  };\r\n  // renderHeader will create a <span> for the given header at the designated index\r\n  const renderHeader = (header: TableConfigHeader, index: number) => {\r\n    const { sort, label, style } = header;\r\n    const headerStyle = { ...defaultHeaderStyle, ...cellStyle, ...style };\r\n    const arrow =\r\n      sort === sortDir.asc ? (\r\n        <i style={cssSortAsc} />\r\n      ) : sort === sortDir.dsc ? (\r\n        <i style={cssSortDsc} />\r\n      ) : sort === true ? (\r\n        <i style={cssSortable} />\r\n      ) : null;\r\n    // change creates the function called when a header sort is toggled\r\n    const change = (index: number) => () => {\r\n      const headers = toggleHeader(index);\r\n      setState({ ...state, headers });\r\n    };\r\n    // if sort is not enabled, clicking should noop, else invoke change\r\n    const onClick = !sort ? () => null : change(index);\r\n    // here is the assembled header rendering\r\n    return (\r\n      <span key={index} style={headerStyle} onClick={onClick}>\r\n        {label} {arrow}\r\n      </span>\r\n    );\r\n  };\r\n  // renderDataRow will create the <span> with the given data at the designated index,\r\n  // using the provided header\r\n  const renderDataRow = (dataObj: DataObj, rowIndex: number) => (\r\n    header: TableConfigHeader,\r\n    index: number\r\n  ) => {\r\n    const { dataKey, render } = header;\r\n    // if a data render function was specified, use that\r\n    const renderCell = render || defaultRenderFunc;\r\n    // if a datakey isn't provided\r\n    const dataVal: any = !dataKey\r\n      ? // supply the current row dataObject\r\n        dataObj\r\n      : // otherwise if the key is the special 'index' dataKey\r\n      dataKey === indexDataKey\r\n      ? // supply the offset row index\r\n        rowIndex + 1\r\n      : // otherwise supply the row data at the given dataKey\r\n        // emphasize: we do want return 'undefined' here if undefined\r\n        dataObj[dataKey];\r\n    return (\r\n      <span key={index} style={cellStyle}>\r\n        {/* extra spacing after rendering the cell */}\r\n        {renderCell(dataVal)}{\" \"}\r\n      </span>\r\n    );\r\n  };\r\n\r\n  const renderDataRows = (tableHeaders: TableConfigHeader[]) => (\r\n    tableData: DataObj,\r\n    indexr: number\r\n  ) => tableHeaders.map(renderDataRow(tableData, indexr));\r\n\r\n  return (\r\n    <div className={props.className || \"\"} style={gridStyle}>\r\n      {headers.map(renderHeader)}\r\n      {sortedData.map(renderDataRows(headers))}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// tslint:disable-next-line: no-implicit-dependencies\r\nimport Highlight from \"react-highlight\";\r\n// tslint:disable-next-line: no-implicit-dependencies\r\nimport { Link } from \"react-router-dom\";\r\nimport packageJSON from '../../package.json'\r\nimport wwords from \"../content/home-content.json\";\r\nimport { DataObj, NaiveTable } from \"../NaiveTable\";\r\nconst words : { [index:string] : {[index:string]: string}} = wwords\r\n\r\ntype SupportedLangs = keyof typeof words;\r\nconst version = packageJSON.version\r\n\r\nconst blamDataRows = (headers: string[], nToGen: number) => {\r\n  let rows: DataObj[] = [];\r\n  for (let index = 0; index < nToGen; index++) {\r\n    const row: DataObj = {};\r\n    headers.forEach(header => {\r\n      row[header] = Math.random();\r\n    });\r\n    rows = [...rows, row];\r\n  }\r\n  return rows;\r\n};\r\n\r\nconst randomData = blamDataRows([\"foo\", \"bar\", \"baz\"], 5);\r\n// These are the supported languages\r\nconst DEFAULT_LANG = \"en\";\r\ninterface HomeScreenProps {\r\n  lang: SupportedLangs;\r\n}\r\n\r\nexport default class Home extends React.Component<HomeScreenProps> {\r\n  private readonly randomFilenames = ['copy', 'new-hot-startup', 'foobarbaz', 'blockchainz', 'stuff', 'wack-wack-wack', '1']\r\n  private randomFilename = this.randomFilenames[0]\r\n  constructor(props: HomeScreenProps) {\r\n    super(props);\r\n    const rand = Math.floor( Math.random() * this.randomFilenames.length)\r\n    this.randomFilename = this.randomFilenames[rand] || this.randomFilename\r\n    const { lang } = props;\r\n  }\r\n\r\n  public render() {\r\n    // this is the word render function\r\n    // it will display the text content in the given language or in english\r\n    // the red X means there is missing text content\r\n    const W = (input: string) => {\r\n      const display = words[DEFAULT_LANG][input] || \"\";\r\n      return `${display}` || \"❌\";\r\n      // return this.theseWords[input] || this.defaultWords[input] || \"❌\";\r\n    };\r\n    return (\r\n      <div className=\"page-content\">\r\n        <div className=\"wrapper\">\r\n          <h1><span role=\"img\" aria-label=\"Bento\">🍱</span> NaiveTable</h1>\r\n          <h2>\r\n            {W(\"w1\")} {W(\"w2\")} {W(\"w9\")} {W(\"w3\")}{\" \"}{`Array<T>`} {W(\"w7\")}\r\n            {W(\"w4\")}{\" \"}\r\n          </h2><h2><a href=\"https://reactjs.org/\">React</a> <a href=\"https://reactjs.org/docs/hooks-intro.html/\">(Hooks)</a>  {W(\"w8\")}</h2>\r\n\r\n          <span>\r\n            <h4>\r\n              v{version} -{\" \"}\r\n              <Link to=\"/test\">Tests</Link>-{\" \"}\r\n              <a href=\"https://github.com/untra/naivetable\">Github</a> -{\" \"}\r\n              <a href=\"https://www.npmjs.com/package/@untra/naivetable\">NPM</a> -{\" \"}\r\n              <a href=\"https://dashboard.cypress.io/#/projects/wrytfx/runs\">Cypress</a>\r\n            </h4>\r\n          </span>\r\n          <hr />\r\n          <div>\r\n            <strong>NaiveTable</strong> {W(\"i1\")} {\"(typescript type \"}\r\n            <code>{\"Array<T> of {[index: string]: any}\"}</code>\r\n            {\").\"}\r\n          </div>\r\n          <div>\r\n            {W(\"i2a\")}\r\n            <code>{\" Array<T> \"}</code>\r\n            {W(\"i2b\")}\r\n          </div>\r\n          <Highlight className=\"tsx\">{\r\n`// react-app-${this.randomFilename}.tsx\r\nimport React from \"react\";\r\nimport { NaiveTable } from \"@untra/naivetable\";\r\n// ${W(\"h0a\")}\r\nconst data = [${JSON.stringify(randomData[0], null, 2)}, ...];\r\n// ${W(\"h0b\")}\r\n<NaiveTable data={data} />`}\r\n          </Highlight>\r\n          <NaiveTable data={randomData} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/***\r\n * Naivetable Tests\r\n * MIT License\r\n * Made with 💙 by @untra\r\n * ---\r\n * tslint:disable-next-line: no-implicit-dependencies\r\n */\r\nimport React from \"react\";\r\nimport nameDataJSON from \"../content/fixtures/nameData.json\";\r\nimport styledHeadersJSON from \"../content/fixtures/styledHeaders.json\";\r\nimport varietyofDataTypesDataJSON from \"../content/fixtures/varietyOfTypesData.json\";\r\nimport { DataObj, NaiveTable, TableConfigHeader } from \"../NaiveTable\";\r\n\r\n// Hi friend 👋 thanks for reading my naivetable tests!\r\n// maybe you're on this github page?\r\n\r\nconst thisGithubPage =\r\n  \"https://github.com/untra/naivetable/blob/master/src/routes/test.tsx\";\r\n\r\n// If you are, then I want to know you are a talented and skilled engineer,\r\n// and it would certainly be a pleasure to shake your hand one day,\r\n// and tell you personally _just how cool you are_\r\n\r\n// you may also want to check out that cypress page:\r\nconst thatCypressPage = \"https://dashboard.cypress.io/#/projects/wrytfx/runs\";\r\n\r\n// redefine the data fixtures to accomodate prefered typings\r\n\r\nconst varietyofDataTypesData: DataObj[] = varietyofDataTypesDataJSON;\r\n\r\nconst styledHeaders: TableConfigHeader[] = styledHeadersJSON;\r\n\r\nconst nameData: DataObj[] = nameDataJSON;\r\n\r\n// complex headers with custom rendering\r\n\r\nexport const nameHeaders = [\r\n  // change the rendered header text with the 'label' parameter\r\n  { label: \"name\", dataKey: \"a\" },\r\n  // individually style each header cell with the 'style' parameter\r\n  { label: \"age\", dataKey: \"b\", style: { backgroundColor: \"pink\" } },\r\n  // provide a 'render' function to control how dataCells render for the column\r\n  {\r\n    label: \"grade status\",\r\n    dataKey: \"c\",\r\n    render: (val: number) => (\r\n      <h2>{`${val > 50 ? \"✅passing\" : \"❌failing\"} the class: ${val}`}</h2>\r\n    )\r\n  },\r\n  // use the 'dataKey' to control the input to the render function\r\n  // provide an empty string to instead call render with the entire dataObject provided\r\n  {\r\n    label: \"assessment\",\r\n    dataKey: \"\",\r\n    render: (val: any) => (\r\n      <h4>{`${JSON.stringify(val.a)} is ${val.c > 90 ? \"really\" : \"\"} ${\r\n        val.c > 50 ? \"smart\" : \"dumb\"\r\n      }`}</h4>\r\n    )\r\n  },\r\n  // you can have more headers than keys in your dataObjects, btw ;)\r\n  // you can also control the 'width' of the column (pass in 'fr' , defaults to 'auto')\r\n  {\r\n    label: \"comment\",\r\n    dataKey: \"\",\r\n    render: () =>\r\n      \"Lorem Ipsum this is the same comment rendered over and over again why won't @LILBTHEBASEDGOD tweet about about me?\",\r\n    width: \"4fr\"\r\n  }\r\n];\r\n\r\nexport default class Test extends React.Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"Bento\">\r\n            🍱\r\n          </span>{\" \"}\r\n          NaiveTable\r\n        </h1>\r\n        <h2>Cypress Tests and React Hooks demo</h2>\r\n        <h3>\r\n          View this page and tests at <a href={thisGithubPage}>Github.com</a>\r\n        </h3>\r\n        <h3>\r\n        View the test results at <a href={thatCypressPage}>Cypress.io</a></h3>\r\n        <p>\r\n          This page is a demonstration of the NaiveTable component used in a\r\n          variety of ways:\r\n        </p>\r\n        <ul>\r\n          <li>It is the selection and input to a variety of cypress tests.</li>\r\n          <li>\r\n            View the chrome console to see statistics and reports of how the\r\n            examples render.\r\n          </li>\r\n          <li>\r\n            This is also a demonstration of the power of react-hooks, a\r\n            functional and clean approach to writing react components.\r\n          </li>\r\n        </ul>\r\n        <h4>\r\n          #1 It should be able to render a variety of different javascript data\r\n          types\r\n        </h4>\r\n        <NaiveTable className={\"test1\"} data={varietyofDataTypesData} />\r\n        <h4>#2 It should be able to render an index left adjacent of the data</h4>\r\n        <NaiveTable className={\"test2\"} data={nameData} includeIndex={true} />\r\n        <h4>#3 It should be able to render a table with custom headers</h4>\r\n        <NaiveTable className={\"test3\"} data={nameData} headers={nameHeaders} />\r\n        <h4>#4 It should be able to render individual styling on each header</h4>\r\n        <NaiveTable\r\n          className={\"test4\"}\r\n          data={nameData}\r\n          headers={styledHeaders}\r\n        />\r\n        <h4>#5 It should be able to render individual styling for the table</h4>\r\n        {\"TODO\"}\r\n        <h4>#6 It should be able to render individual styling for each cell</h4>\r\n        {\"TODO\"}\r\n        <h4>#7 It should be able to display sortable columns</h4>\r\n        {\"TODO\"}\r\n        <h4>#8 It should display sorted column data sorted correctly</h4>\r\n        {\"TODO\"}\r\n        <h4>#9 It should be able to render empty data</h4>\r\n        <NaiveTable className={\"test9\"} data={[]} />\r\n        <h4>#10 It should be able to render a data of one</h4>\r\n        <NaiveTable className={\"test10\"} data={[{ of: \"one\" }]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n// tslint:disable-next-line: no-implicit-dependencies\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport home from \"./home\";\r\nimport test from \"./test\";\r\n\r\n// NOTE: see https://medium.com/@Dragonza/react-router-problem-with-gh-pages-c93a5e243819\r\n// for explanation of BrowserRouter hook-up\r\n\r\nconst reload = () => window.location.reload();\r\n\r\nexport default () => (\r\n  <HashRouter basename=\"/\">\r\n  <Switch>\r\n    <Route path=\"/test\" component={test} onEnter={reload} />\r\n    <Route exact path=\"/\" component={home} />\r\n    <Route\r\n      component={() => (\r\n        <div className=\"wrapper\">\r\n          <h1>{\"404 Not found\"}</h1>{\" \"}\r\n        </div>\r\n      )}\r\n    />\r\n    </Switch>\r\n  </HashRouter>\r\n);\r\n","import ReactDOM from \"react-dom\";\r\nimport routes from './routes'\r\n\r\n\r\nReactDOM.render(routes(), document.getElementById(\"root\"));"],"sourceRoot":""}